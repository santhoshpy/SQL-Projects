use sunday
select * from fact
select * from Product
select * from Location

---1.Display the number of states present in the LocationTable.
Select count(distinct(state)) as Number_of_states from  Location
---2. How many products are of regular type?
select count(Type) as Regular_type from product
where Type = 'Regular'
---3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as Market_spending from fact
where ProductId = '1'
---4. What is the minimum sales of a product?
select  min(sales)AS minimumsale from fact
---5.Display the max Cost of Good Sold (COGS).
select  max(COGS)AS maximum_cost from fact
---6.Display the details of the product where product type is coffee.
select * from Product
where Product_Type ='Coffee'
---7.Display the details where total expenses are greater than 40
select * from fact
where Total_Expenses > '40'
---8.What is the average sales in area code 719?
select AVG(sales) as AVG_sales from fact
where Area_Code = '719'
---9.Find out the total profit generated by Colorado state
select sum(profit)as Total_Profit from fact
join Location on Fact.Area_Code=Location.Area_Code
where State = 'Colorado'
---10.Display the average inventory for each product ID
select productid,avg(Inventory) as avginventory from fact
group by ProductId
order by ProductId
---11.Display state in a sequential order in a Location Table.
select Area_code ,state from location
order by Area_Code
---12.Display the average budget of the Product where the average budget margin should be greater than 100.
select productid, avg(Budget_Sales)as average_budget from fact
group by ProductId
having avg(Budget_margin )>100
---13.What is the total sales done on date 2010-01-01?
select Date, sum(sales)as Total_Sales from fact
group by Date
having date ='2010-01-01'
--14. Display the average total expense of each product ID on an individual date.
select Productid,date, avg(total_expenses) as average_expense from fact 
group by Date,ProductId
order by date ,ProductId
---15.Display the table with the following attributes such as date, productID,product_type, product, sales, profit, state, area_code.
select fact.date, fact.productID,	Product.product_type, fact.sales, fact.profit, Location.state, Location.area_code 
from fact 
join product on fact.ProductId = Product.ProductId 
join Location on Location.Area_Code=fact.Area_Code
---16.Display the rank without any gap to show the sales wise rank.
select sales,dense_rank()over (order by sales desc)as sales_rank  from fact
---17.find the state wise profit and sales.
select  location.State,sum(fact.Profit)as profit ,sum(fact.Sales)as sales from fact join Location on
fact.Area_Code = Location.Area_Code
group by State
order by profit desc
---18.Find the state wise profit and sales along with the product name
select Product.Product,location.State,sum(fact.Profit)as profit ,sum(fact.Sales)as sales from location 
inner join fact on fact.Area_Code = Location.Area_Code 
inner join Product on fact.ProductId =  Product.ProductId
group by Location.State,Product.Product
order by sales desc
---19.If there is an increase in sales of 5%, calculate the increasedsales

select sales ,round(sales+(sales*5/100),2)as increased_sales from fact
order by increased_sales desc
---20.Find the maximum profit along with the product ID and producttype
select P.ProductId , P.Product_Type,max(f.Profit) as maximum from fact f join Product P
on f.ProductId = p.ProductId
group by P.Product_Type,	P.ProductId
order by maximum desc
---21.Create a stored procedure to fetch the result according to the product type from Product Table
create procedure prod @type varchar(50)
as 
select * from product 
where product_type = @type
go
exec prod @type='coffee'

---22.Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select*, iif(Total_Expenses<60,'profit','loss') as outcome from fact

---Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order
   select date, productid, sum(sales)as totalsales from fact 
   group by rollup(date,ProductId)
   order by ProductId, date

   ---Apply union and intersection operator on the tables which consist of attribute area code.
   select Area_Code from fact union	 select Area_Code from Location	
   select Area_Code from fact intersect	 select Area_Code from Location	

---Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference
create function Product_choose(@product_ty as varchar(50))
Returns table
as
Return
(select * from Product
 where Product_Type = @product_ty
 )

 select * from dbo.Product_choose('tea')
 ---Change the product type from coffee to tea where product ID is 1 and undo it
 update Product
 set Product_Type ='coffee'
 where ProductId ='1'
  ----Display the date, product ID and sales where total expenses are between 100 to 200.
  select date, Productid,sales  from fact
  where Total_Expenses between 100 and 200
  ---28. Delete the records in the Product Table for regular type.
  delete from Product
  where Type= 'regular'

---29. Display the ASCII value of the fifth character from the columnProduct
select ASCII(substring(PRODUCT,1,5))as ASCIIVALUE from Product

